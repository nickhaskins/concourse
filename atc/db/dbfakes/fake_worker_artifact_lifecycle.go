// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"sync"

	"github.com/concourse/concourse/atc/db"
)

type FakeWorkerArtifactLifecycle struct {
	RemoveExpiredArtifactsStub        func() error
	removeExpiredArtifactsMutex       sync.RWMutex
	removeExpiredArtifactsArgsForCall []struct {
	}
	removeExpiredArtifactsReturns struct {
		result1 error
	}
	removeExpiredArtifactsReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveUnassociatedArtifactsStub        func() error
	removeUnassociatedArtifactsMutex       sync.RWMutex
	removeUnassociatedArtifactsArgsForCall []struct {
	}
	removeUnassociatedArtifactsReturns struct {
		result1 error
	}
	removeUnassociatedArtifactsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWorkerArtifactLifecycle) RemoveExpiredArtifacts() error {
	fake.removeExpiredArtifactsMutex.Lock()
	ret, specificReturn := fake.removeExpiredArtifactsReturnsOnCall[len(fake.removeExpiredArtifactsArgsForCall)]
	fake.removeExpiredArtifactsArgsForCall = append(fake.removeExpiredArtifactsArgsForCall, struct {
	}{})
	fake.recordInvocation("RemoveExpiredArtifacts", []interface{}{})
	fake.removeExpiredArtifactsMutex.Unlock()
	if fake.RemoveExpiredArtifactsStub != nil {
		return fake.RemoveExpiredArtifactsStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeExpiredArtifactsReturns
	return fakeReturns.result1
}

func (fake *FakeWorkerArtifactLifecycle) RemoveExpiredArtifactsCallCount() int {
	fake.removeExpiredArtifactsMutex.RLock()
	defer fake.removeExpiredArtifactsMutex.RUnlock()
	return len(fake.removeExpiredArtifactsArgsForCall)
}

func (fake *FakeWorkerArtifactLifecycle) RemoveExpiredArtifactsCalls(stub func() error) {
	fake.removeExpiredArtifactsMutex.Lock()
	defer fake.removeExpiredArtifactsMutex.Unlock()
	fake.RemoveExpiredArtifactsStub = stub
}

func (fake *FakeWorkerArtifactLifecycle) RemoveExpiredArtifactsReturns(result1 error) {
	fake.removeExpiredArtifactsMutex.Lock()
	defer fake.removeExpiredArtifactsMutex.Unlock()
	fake.RemoveExpiredArtifactsStub = nil
	fake.removeExpiredArtifactsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeWorkerArtifactLifecycle) RemoveExpiredArtifactsReturnsOnCall(i int, result1 error) {
	fake.removeExpiredArtifactsMutex.Lock()
	defer fake.removeExpiredArtifactsMutex.Unlock()
	fake.RemoveExpiredArtifactsStub = nil
	if fake.removeExpiredArtifactsReturnsOnCall == nil {
		fake.removeExpiredArtifactsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeExpiredArtifactsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeWorkerArtifactLifecycle) RemoveUnassociatedArtifacts() error {
	fake.removeUnassociatedArtifactsMutex.Lock()
	ret, specificReturn := fake.removeUnassociatedArtifactsReturnsOnCall[len(fake.removeUnassociatedArtifactsArgsForCall)]
	fake.removeUnassociatedArtifactsArgsForCall = append(fake.removeUnassociatedArtifactsArgsForCall, struct {
	}{})
	fake.recordInvocation("RemoveUnassociatedArtifacts", []interface{}{})
	fake.removeUnassociatedArtifactsMutex.Unlock()
	if fake.RemoveUnassociatedArtifactsStub != nil {
		return fake.RemoveUnassociatedArtifactsStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeUnassociatedArtifactsReturns
	return fakeReturns.result1
}

func (fake *FakeWorkerArtifactLifecycle) RemoveUnassociatedArtifactsCallCount() int {
	fake.removeUnassociatedArtifactsMutex.RLock()
	defer fake.removeUnassociatedArtifactsMutex.RUnlock()
	return len(fake.removeUnassociatedArtifactsArgsForCall)
}

func (fake *FakeWorkerArtifactLifecycle) RemoveUnassociatedArtifactsCalls(stub func() error) {
	fake.removeUnassociatedArtifactsMutex.Lock()
	defer fake.removeUnassociatedArtifactsMutex.Unlock()
	fake.RemoveUnassociatedArtifactsStub = stub
}

func (fake *FakeWorkerArtifactLifecycle) RemoveUnassociatedArtifactsReturns(result1 error) {
	fake.removeUnassociatedArtifactsMutex.Lock()
	defer fake.removeUnassociatedArtifactsMutex.Unlock()
	fake.RemoveUnassociatedArtifactsStub = nil
	fake.removeUnassociatedArtifactsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeWorkerArtifactLifecycle) RemoveUnassociatedArtifactsReturnsOnCall(i int, result1 error) {
	fake.removeUnassociatedArtifactsMutex.Lock()
	defer fake.removeUnassociatedArtifactsMutex.Unlock()
	fake.RemoveUnassociatedArtifactsStub = nil
	if fake.removeUnassociatedArtifactsReturnsOnCall == nil {
		fake.removeUnassociatedArtifactsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeUnassociatedArtifactsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeWorkerArtifactLifecycle) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.removeExpiredArtifactsMutex.RLock()
	defer fake.removeExpiredArtifactsMutex.RUnlock()
	fake.removeUnassociatedArtifactsMutex.RLock()
	defer fake.removeUnassociatedArtifactsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWorkerArtifactLifecycle) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.WorkerArtifactLifecycle = new(FakeWorkerArtifactLifecycle)
